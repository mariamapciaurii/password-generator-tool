{"version":3,"sources":["App.js","characters.js","reportWebVitals.js","index.js"],"names":["App","useState","password","setPassword","passwordLength","setPasswordLength","includeUppercase","setIncludeUppercase","includeLowercase","setIncludeLowercase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","createPassword","characterList","characterListLength","length","i","characterIndex","Math","round","random","charAt","className","onClick","e","newTextArea","document","createElement","innerText","body","appendChild","select","execCommand","remove","copyToClipboard","htmlFor","defaultValue","onChange","target","value","type","id","name","max","min","checked","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.91273e60.chunk.js","sourcesContent":["import React , {useState} from 'react' ;\nimport './App.css';\nimport{ numbers, upperCaseLetters, lowerCaseLetters, specialCharacters} from './characters';\n\nfunction App() {\n  const [password, setPassword] = useState('')\n  const [passwordLength, setPasswordLength] = useState(32)\n  const [includeUppercase, setIncludeUppercase] = useState(false)\n  const [includeLowercase, setIncludeLowercase] = useState(false)\n  const [includeNumbers, setIncludeNumbers] = useState(false)\n  const [includeSymbols, setIncludeSymbols] = useState(false)\n\n  const generatePassword = (e) =>{\n    let characterList = '';\n\n    if (includeLowercase){\n      characterList = characterList + lowerCaseLetters\n    };\n    if (includeUppercase) {\n      characterList = characterList + upperCaseLetters\n    };\n    if (includeNumbers) {\n      characterList = characterList + numbers\n    };\n    if (includeSymbols) {\n      characterList = characterList + specialCharacters\n    };\n    setPassword(createPassword(characterList));\n  }\n\n  const createPassword = (characterList) => {\n    let password = '';\n    const characterListLength = characterList.length;\n    for (let i = 0; i < passwordLength; i++){\n      const characterIndex = Math.round(Math.random() * characterListLength);\n      password = password + characterList.charAt(characterIndex);\n    }\n    return password;\n  }\n  const copyToClipboard = () => {\n    const newTextArea = document.createElement('textarea')\n    newTextArea.innerText = password\n    document.body.appendChild(newTextArea)\n    newTextArea.select()\n    document.execCommand('copy')\n    newTextArea.remove()\n  }\n\n  const copyPassword = (e) => {\n      copyToClipboard()\n  \n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"Generator-Container\">\n        <div className=\"Generator-Container__Content\">\n          <h2 className=\"Generator-Header__Title\">Password Generator</h2>\n          <div className=\"Generator-Password__Wrapper\">\n            <h3 className=\"Password-Wrapper__Title\">{password}</h3>\n            <button onClick={copyPassword} className=\"Password-Coppy__btn\">\n              <i className='far fa-copy'></i>\n            </button>\n          </div>\n\n          <div className=\"Generator-Setting__box Generator-Password__Length\">\n            <label htmlFor=\"password-strength\">Password Lenght</label>\n            <input\n              defaultValue={passwordLength}\n              onChange={(e) => setPasswordLength(e.target.value)}\n              type ='number'\n              id='password-strength'\n              name='password-strength'\n              max='32'\n              min='4'\n            />\n          </div>\n\n          <div className='Generator-Setting__box'>\n            <label htmlFor='uppercase-letters'>Include Uppercase </label>\n            <input\n              checked={includeUppercase}\n              onChange={(e) => setIncludeUppercase(e.target.checked)}\n              type='checkbox'\n              id='uppercase-letters'\n              name='uppercase-letters'\n            />\n          </div>\n\n          <div className='Generator-Setting__box'>\n            <label htmlFor='lowercase-letters'>Include Lowercase</label>\n            <input\n              checked={includeLowercase}\n              onChange={(e) => setIncludeLowercase(e.target.checked)}\n              type='checkbox'\n              id='lowercase-letters'\n              name='lowercase-letters'\n            />\n          </div>\n\n          <div className='Generator-Setting__box'>\n            <label htmlFor='include-numbers'>Include Numbers</label>\n            <input\n              checked={includeNumbers}\n              onChange={(e) => setIncludeNumbers(e.target.checked)}\n              type='checkbox'\n              id='include-numbers'\n              name='include-numbers'\n            />\n          </div>\n\n          <div className='Generator-Setting__box'>\n            <label htmlFor='include-symbols'>Include Symbols</label>\n            <input\n              checked={includeSymbols}\n              onChange={(e) => setIncludeSymbols(e.target.checked)}\n              type='checkbox'\n              id='include-symbols'\n              name='include-symbols'\n            />\n          </div>\n          <button onClick={generatePassword} className=\"Generator-Password__btn\">GENERATE PASSWORD</button>\n\n        </div>\n      </div>  \n    </div>\n  );\n}\n\nexport default App;\n","export const numbers = '0123456789'\r\nexport const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\nexport const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\r\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}